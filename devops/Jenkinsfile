def GIT_REPO_URL = "git@github.com:andersjio/nx-examples.git"
//def BRANCH_NAME = "main"
def WORK_TIME_SIMULATION = 5
def allJob = env.JOB_NAME.tokenize('/') as String[];
def projectName = allJob[0];
def PVC_NAME = projectName + "-" + env.BRANCH_NAME + "-workspace"
def testPodYaml = """
spec:
  containers:
  - name: test-pod
    image: abrj/nx-example-build-node:1.2.0
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - infinity
    resources:
      limits:
        memory: "3000Mi"
        cpu: "2"
      requests:
        memory: "3000Mi"
        cpu: "2"
    livenessProbe:
      exec:
        command:
          - bin/bash
          - -c
          - ./liveness.sh
      initialDelaySeconds: 60
      timeoutSeconds: 25
  nodeSelector:
    role: "ng-spot"
  tolerations:
  - key: "jenkins-builds"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
"""

kubectlYaml= """
spec:
  containers:
  - name: alpine-pod
    image: alpine/git
    command:
    - sleep
    args:
    - infinity
  - name: kubectl-pod
    image: abrj/kubectl:1.0
    command:
    - sleep
    args:
    - infinity
  nodeSelector:
    role: "ng-spot"
  tolerations:
  - key: "jenkins-builds"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

"""

pvc = """
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: $PVC_NAME
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 2Gi
"""
pipeline {
    options{
        timestamps()
        skipDefaultCheckout()
    }
    agent {
        kubernetes {
            label "${JOB_NAME}-${BUILD_NUMBER}-pipeline"
            yaml kubectlYaml
            showRawYaml true
            serviceAccount "jenkins-build-sa"
        }
    }
    stages {
        stage('Initialize PVC and PV') {
            steps {
                writeFile file: "pvc.yaml", text: pvc
                container('kubectl-pod') {
                    sh 'kubectl apply -f pvc.yaml'
                }
            }
        }
        stage('Pipeline steps') {
            agent {
                kubernetes {
                    label "${JOB_NAME}-${BUILD_NUMBER}-yarn"
                    yaml testPodYaml
                    workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "$PVC_NAME", readOnly: false)
					          showRawYaml true
                }
            }
            stages{
                stage('Checkout source code'){
                    steps {
                        container('test-pod') {
                          git branch: env.BRANCH_NAME,
                          credentialsId: 'private-ssh',
                          url: "$GIT_REPO_URL"
                        }
                    }
                }
                stage('Yarn install'){
                    steps{
                        container('test-pod'){
                            sh """yarn install"""
                        }
                    }
                }
                stage('Linting'){
                    steps{
                        container('test-pod'){
				                  sh "cat projects.json && sleep 5"
                        }
                    }
                }
                stage('Stages to run in Parallel') {
                    steps {
                        script {
                            def json = readJSON file: 'projects.json'
                            def nx_projects = json["projects"]
                            parallel nx_projects.collectEntries {
                                ["${it}" : generateUnitTestStage(it, testPodYaml, "$PVC_NAME", "$WORK_TIME_SIMULATION")]
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            container('alpine-pod'){
		      junit (allowEmptyResults: true, testResults: "**/test-results-unit.xml")
            }
        }
    }
}

def generateUnitTestStage(job, pod_file, pvc, work_time_simulation) {
    return {
        def project = job
        stage(job) {
            podTemplate(
                yaml:pod_file,
                showRawYaml: false,
                workspaceVolume: persistentVolumeClaimWorkspaceVolume(claimName: pvc, readOnly: false)
                )  {
                node(POD_LABEL) {
                    stage("Unit test ${job}") {
                        container('test-pod') {
                            sh """
                                echo "Running tests for project: ${job} in $HOSTNAME"
                                #nx run-many --target=test --projects ${job}  --coverage
                                sleep ${work_time_simulation} #Strictly added to simulate a bit of build time per pod
                                echo "Done with tests for ${job}"
                            """
                        }
                    }
                }
            }
        }
    }
}
