def GIT_REPO_URL = "git@github.com:andersjio/nx-examples.git"
def BRANCH_NAME = "main"
def WORK_TIME_SIMULATION = 30
def cwbPod = """
spec:
  containers:
  - name: cwb-small
    image: nx-example-build-node:14.17.4
    imagePullPolicy: IfNotPresent
    command:
    - sleep
    args:
    - infinity
    volumeMounts:
      - name: cwb-vol
        mountPath: /app/
  - name: cwb-lint
    image: nx-example-build-node:14.17.4
    imagePullPolicy: IfNotPresent
    command:
    - sleep
    args:
    - infinity
    volumeMounts:
      - name: cwb-vol
        mountPath: /app/
    resources:
      limits:
        memory: "1500Mi"
      requests:
        memory: "1000Mi"
    livenessProbe:
      exec:
        command:
          - bin/bash
          - -c
          - ./liveness.sh
      initialDelaySeconds: 60
      timeoutSeconds: 25
  volumes:
  - name: cwb-vol
    persistentVolumeClaim:
        claimName: cwb-pvc
"""

kubectlYaml= """
spec:
  containers:
  - name: alpine-pod
    image: alpine/git
    command:
    - sleep
    args:
    - infinity
"""

pipeline {
    options{
        timestamps()
        skipDefaultCheckout()
    }
	environment {
		NO_PROXY="localhost, 0.0.0.0/4201, 0.0.0.0/9876"
	}
    agent {
        kubernetes {
            label "${JOB_NAME}-${BUILD_NUMBER}-pipeline"
            yaml kubectlYaml
            showRawYaml false
            workspaceVolume dynamicPVC(accessModes: "ReadWriteMany", requestsSize: "2Gi", storageClassName: "standard")
        }
    }
    stages {
        stage('Checkout source code'){
            steps {
                container('cwb-lint') {
                  git branch: "$BRANCH_NAME",
                  credentialsId: 'private-ssh',
                  url: "$GIT_REPO_URL"
                }
            }
        }
        stage("Set env"){
            steps{
                container('alpine-pod'){
                    script {
                        env.WORKSPACE_PVC = "pvc-workspace-${JENKINS_AGENT_NAME}"
                    }
                }
            }
        }
        stage('Setup Workspace') {
            agent {
                kubernetes {
                    label "${JOB_NAME}-${BUILD_NUMBER}-workspace"
                    yaml cwbPod
                    workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "$WORKSPACE_PVC", readOnly: false)
					          showRawYaml false
                }
            }
            stages{
                stage('Yarn install'){
                    steps{
                        container('cwb-lint'){
                            sh ''' node -v && yarn --cache-folder /app/.yarn-cache '''
                        }
                    }
                }
            }
        }
        stage('Lint and Tests') {
            agent {
                kubernetes {
                    label "${JOB_NAME}-${BUILD_NUMBER}-lint"
                    yaml cwbPod
                    workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "$WORKSPACE_PVC", readOnly: false)
					          showRawYaml false
                }
            }
            stages{
                stage('Linting'){
                    steps{
                        container('cwb-lint'){
							            sh "nx run-many --target=lint --all"
                        }
                    }
                }
            }
        }
        stage('Stages to run in Parallel') {
            steps {
                script {
                    def json = readJSON file: 'projects.json'
                    def nx_projects = json["projects"]
                    parallel nx_projects.collectEntries {
                        ["${it}" : generateStage(it, cwbPod, "$WORKSPACE_PVC")]
                    }
                }
            }
        }
    }
    post {
        always {
            container('alpine-pod'){
				      junit (allowEmptyResults: true, testResults: "**/test-results-unit.xml")
            }
        }
		aborted {
            container('alpine-pod'){
                sh """
					echo "If you see this message in the log:\n (Exit Code: 137, Reason: Error)"
					echo "This might be due to a Out-of-Memory (OOM) error"

                """
            }
		}


    }
}

def generateStage(job, pod_file, pvc) {
    return {
        def project = job
        stage(job) {
            podTemplate(
                yaml:pod_file,
                showRawYaml: false,
                workspaceVolume: persistentVolumeClaimWorkspaceVolume(claimName: pvc, readOnly: false)
                )  {
                node(POD_LABEL) {
                    stage("Unit test ${job}") {
                        container('cwb-lint') {
                            sh """
                                echo "Running tests for project: ${job} in $HOSTNAME"
                                yarn run test --project ${job}
                                sleep ${WORK_TIME_SIMULATION}
                                echo "Done with tests for ${job}!"
                            """
                        }
                    }
                }
            }
        }
    }
}
